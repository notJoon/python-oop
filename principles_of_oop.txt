1. ENCAPSULATION
    - restricting direct access 

    ```python
    self.__name = name  <-- double underscore
    ...

    if len(value) > 10: ... 
    ```


2. ABSTRACTION


3. INHERITANCE
    - allow us to re-use the codes across the different classes  


4. POLYMORPHISM 
    - single type of entity to represent multiple types for dirffernet scenario 


### SOLID ###
 S : 단일 책임 원칙 (Single responsibility principle, SRP)
 O : 개방-폐쇄 원칙 (Open/closed principle, OCP)
 L : 리스코프 치환 원칙(Liskov substitution principle, LSP)
 I : 인터페이스 분리 원칙 (Interface segregation principle, ISP)
 D : 의존관계 역전 원칙 (Dependency inversion principle, DIP)

## 단일 책임 원칙
 >>> 한 클래스는 하나의 책임만 가져야 한다


## 개방-폐쇄 원칙
 >>> 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀 있어야 한다.



## 리스코프 치환 원칙
 >>> 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
 
 * 치환성(substituability)
 - 자료형 S가 자료형 T의 하위형이라면 필요한 프로그램의 속성의 변경 없이
   자료형 T의 객체를 자료형 S의 객체로 교체(치환)할 수 있다는 원칙

 - (강한) 행동적 하위형화
 - q(x)를 자료형 T의 객체 x에 대해 증명할 수 있는 속성이라 할 때
   S가 T의 하위형이라 하면 q(y)는 자료형 S의 객체 y에 대해 증명할 수 있어야 한다. 

 - LSP의 요구사항
  1. 하위형에서 메서드 인수의 반공변성(covariant)
  2. 하위형에서 반환형의 공변성 
  3. 하위형에서 메서드는 상위형 메서드에서 던져진 예외의 하위형을 제외하고 새로운 예외를 던지면 안된다.

  그 외 추가 조건들
  1. 하위형에서 선행조건은 강화될 수 없다.
  2. 하위형에서 후행조건은 약화될 수 없다.
  3. 하위형에서 상위형의 불변조건은 반드시 유지되어야 한다.
  4. 이력 제약 조건
    - 객체는 그 자신의 메서드를 통해서만 수정(캡슐화) 할 수 있는 것으로 간주된다.
    - 하위형은 상위형에 없는 메서드를 추가할 수 있기 때문에, 추가된 메서드를 통해 상위형에서 허용하지 않는
      하위형 상태의 변경을 일으킬 수 있지만 이력조건은 이를 방지하는 효과를 가진다. 


## 인터페이스 분리 원칙 
 >>> 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.


## 의존관계 역전 원칙
 >>> 프로그래머는 추상화에 의존해야하지, 구체화에 의존하면 안된다. 